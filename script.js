// day 2/1

let data =[1,12,2,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,6,19,23,2,23,6,27,2,6,27,31,2,13,31,35,1,10,35,39,2,39,13,43,1,43,13,47,1,6,47,51,1,10,51,55,2,55,6,59,1,5,59,63,2,9,63,67,1,6,67,71,2,9,71,75,1,6,75,79,2,79,13,83,1,83,10,87,1,13,87,91,1,91,10,95,2,9,95,99,1,5,99,103,2,10,103,107,1,107,2,111,1,111,5,0,99,2,14,0,0];
let data2 = [1,0,0,3,1,1,2,3,1,3,4,3,1,5,0,3,2,1,10,19,1,6,19,23,2,23,6,27,2,6,27,31,2,13,31,35,1,10,35,39,2,39,13,43,1,43,13,47,1,6,47,51,1,10,51,55,2,55,6,59,1,5,59,63,2,9,63,67,1,6,67,71,2,9,71,75,1,6,75,79,2,79,13,83,1,83,10,87,1,13,87,91,1,91,10,95,2,9,95,99,1,5,99,103,2,10,103,107,1,107,2,111,1,111,5,0,99,2,14,0,0];
let fours = 0;
let fours2;
let help = 0;

do{

    if(data[fours] == 1){
        help = data[data[fours +1]] + data[data[fours +2]];
        data[data[fours +3]] = help;
    }
    else if(data[fours] == 2){
        help = data[data[fours +1]] * data[data[fours +2]];
        data[data[fours +3]] = help;
    }
    fours += 4;
    if(data[fours] == 99){
        console.log(data[0]);
    }
}
while (data[fours] != 99);

// day 2/2

for(let i=0; i<100; i++){
    for(let j=0; j<100; j++){
        let data3 = data2.slice();
        data3[1] = i;
        data3[2] = j;
        fours2 = 0;

        do{
            if(data3[fours2] == 1){
                help = data3[data3[fours2 +1]] + data3[data3[fours2 +2]];
                data3[data3[fours2 +3]] = help;
            }
            else if(data3[fours2] == 2){
                help = data3[data3[fours2 +1]] * data3[data3[fours2 +2]];
                data3[data3[fours2 +3]] = help;
            }
            fours2 += 4;
            if(data3[0] == 19690720){
                console.log('noun: '+data3[1] + ' verb: ' + data3[2]  + ' wynik: ' + (100*data3[1]+data3[2]));
            }

        }
        while (data3[fours2] != 99 );


    }
}

/*
// day 3/1
//dane
let line1 = 'R1009,U993,L383,D725,R163,D312,R339,U650,R558,U384,R329,D61,L172,D555,R160,D972,L550,D801,L965,U818,L123,D530,R176,D353,L25,U694,L339,U600,L681,D37,R149,D742,R762,U869,R826,U300,L949,U978,L303,U361,R136,D343,L909,U551,R745,U913,L566,D292,R820,U886,R205,D431,L93,D71,R577,U872,L705,U510,L698,U963,R607,U527,L669,D543,R690,U954,L929,D218,R490,U500,L589,D332,R949,D538,R696,U659,L188,U468,L939,U833,L445,D430,R78,D303,R130,D649,R849,D712,L511,U745,R51,U973,R799,U829,R605,D771,L837,U204,L414,D427,R538,U116,R540,D168,R493,U900,L679,U431,L521,D500,L428,U332,L954,U717,L853,D339,L88,U807,L607,D496,L163,U468,L25,U267,L759,D898,L591,U445,L469,U531,R596,D486,L728,D677,R350,D429,R39,U568,R92,D875,L835,D841,R877,U178,L221,U88,R592,U692,R455,U693,L419,U90,R609,U672,L293,U168,R175,D456,R319,D570,R504,D165,L232,D624,L604,D68,R807,D59,R320,D281,L371,U956,L788,D897,L231,D829,R287,D798,L443,U194,R513,D925,L232,U225,L919,U563,R448,D889,R661,U852,L950,D558,L269,U186,L625,U673,L995,U732,R435,U849,L413,D690,L158,D234,R361,D458,L271,U90,L781,U754,R256,U162,L842,U927,L144,D62,R928,D238,R473,U97,L745,U303,L487,D349,L520,D31,L825,U385,L133,D948,L39,U62,R801,D664,L333,U134,R692,U385,L658,U202,L279,D374,R489,D686,L182,U222,R733,U177,R94,D603,L376,U901,R216,D851,L155,D214,L460,U758,R121,D746,L180,U175,L943,U146,L166,D251,L238,U168,L642,D341,R281,U182,R539,D416,R553,D67,L748,U272,R257,D869,L340,U180,R791,U138,L755,D976,R731,U713,R602,D284,L258,U176,R509,U46,R935,U576,R96,U89,L913,U703,R833';
let line2 = 'L1006,D998,R94,D841,R911,D381,R532,U836,L299,U237,R781,D597,L399,D800,L775,D405,L485,U636,R589,D942,L878,D779,L751,U711,L973,U410,L151,U15,L685,U417,L106,D648,L105,D461,R448,D743,L589,D430,R883,U37,R155,U350,L421,U23,R337,U816,R384,D671,R615,D410,L910,U914,L579,U385,R916,U13,R268,D519,R289,U410,L389,D885,L894,U734,L474,U707,L72,U155,L237,U760,L127,U806,L15,U381,L557,D727,L569,U320,L985,D452,L8,D884,R356,U732,L672,D458,L485,U402,L238,D30,R644,U125,R753,U183,L773,U487,R849,U210,L164,D808,L595,D668,L340,U785,R313,D72,L76,D263,R689,U604,R471,U688,R462,D915,R106,D335,R869,U499,R190,D916,R468,D882,R56,D858,L143,D741,L386,U856,R50,U853,R151,D114,L773,U854,L290,D344,L23,U796,L531,D932,R314,U960,R643,D303,L661,D493,L82,D491,L722,U848,L686,U4,L985,D509,L135,D452,R500,U105,L326,D101,R222,D944,L645,D362,L628,U305,L965,U356,L358,D137,R787,U728,R967,U404,R18,D928,L695,D965,R281,D597,L791,U731,R746,U163,L780,U41,L255,U81,L530,D964,R921,D297,R475,U663,L226,U623,L984,U943,L143,U201,R926,U572,R343,U839,R764,U751,R128,U939,R987,D108,R474,U599,R412,D248,R125,U797,L91,D761,L840,U290,L281,U779,R650,D797,R185,D320,L25,U378,L696,U332,R75,D620,L213,D667,R558,U267,L846,U306,R939,D220,R311,U827,R345,U534,R56,D679,R48,D845,R898,U8,R862,D960,R753,U319,L886,D795,R805,D265,R876,U729,R894,D368,R858,U744,R506,D327,L903,U919,L721,U507,L463,U753,R775,D719,R315,U128,R17,D376,R999,D386,L259,U181,L162,U605,L265,D430,R35,D968,R207,U466,R796,D667,R93,U749,L315,D410,R312,U929,L923,U260,R638';
// dziele dane na tabele
let v1 = line1.split(",");
let v2 = line2.split(",");
let map = [];
let map2 = [];
// pointer to wskaznik, gdzie byl ostatni punkt,
let pointer1 = [12000, 12000];
let pointer2 = [12000, 12000];
let cells; // tu bedzie liczone ile mam isc prawo, lewo gora dol
let distance = 9999999; // tu bedzie wynik
// robei sobie mape po ktorej bede chodzil
for(let i=0; i <24000; i++){
    for(let j=0; j <24000; j++){
        map2[j] = 0;
    }
    map[i] = map2;
}
// kopiuje sobie mape tu bedzie druga sciezka
let map3= map.slice();

const path = function(move, map, pointer){
    cells= parseInt(move.substr(1)); // pobieram ilosc krokow
    if(move[0] == 'L'){ // sprawdzam kierunek
        for(let a=(pointer[0]-cells); a <= pointer[0]; a++){ // wykonuje odpowiednia ilosc krokow w odpowiednim kierunku
            map[a][pointer[1]] = '1'; // zaznaczam ze tu bylem
        }
        pointer[0] = pointer[0]- cells;  // zmieniam wspolrzedna wskaznika, przesowa sie
    }
    if(move[0] == 'R'){
        for(let a=pointer[0]; a <= (pointer[0]+cells); a++){
            map[a][pointer[1]] = '1';
        }
        pointer[0] += cells;
    }
    if(move[0] == 'U'){
        for(let a=pointer[1]; a <= pointer[0]+cells; a++){
            map[pointer[0]][a] = '1';
        }
        pointer[1] += (cells);
    }
    if(move[0] == 'D'){
        for(let a=pointer[1]-cells; a <= pointer[1]; a++){
            map[pointer[0]][a] = '1';
        }
        pointer[1] = pointer[1]- cells;
    }
}

for(let z=0 ; z < v1.length; z++) {  // odpalam funkcje dla 1 mapy i 1 sciezki
    path(v1[z], map, pointer1);
}
map[12000,12000] = 0; // wynik mialem 0, myslalem ze to moze byc powod

for(let c=0 ; c < v2.length; c++) { // odpalam i dla drugiej
    path(v2[c], map3, pointer2);
}
map3[12000,12000] = 0;

for(let i=0; i <24000; i++){  // sprawdzam czy mapa 1 i mapa 3 ma taka sama wartosc dla odpowiedniego pola (jak tak znaczy sie ze sie przecina), nie licze zer, tylko jedynki
    for(let j=0; j <24000; j++) {
        if(map[i][j] == map3[i][j] && map[i][j] != 0 ){
            if(distance > Math.abs(12000 -i)+ Math.abs(12000-j)){
                distance = Math.abs(12000 -i)+ Math.abs(12000-j);  // obliczam dystans
                console.log(i + ' ' + j);
            }
        }

    }
}
console.log('Odleglosc to: ' + distance);  // i dostaje zly wynik */



 // day 4/1 zrobione, 4/2 last check

let first = 206938;
let last = 679128;
let last2= '';
let counter =0;

let lastcheck = function(tekst){
    for(let j=0; j<6; j++){
        if(parseInt(last2[j])==parseInt(last2[j+1]) && parseInt(last2[j])!=parseInt(last2[j-1])&& parseInt(last2[j+1])!=parseInt(last2[j+2])){
            counter ++;
            return 0;
        }
    }
}

for(let i=first; i<last; i++){
    last2= i+'';
    if(parseInt(last2[0])<=parseInt(last2[1]) && parseInt(last2[1])<=parseInt(last2[2]) && parseInt(last2[2])<=parseInt(last2[3]) && parseInt(last2[3])<=parseInt(last2[4]) && parseInt(last2[4])<=parseInt(last2[5])){
        if(parseInt(last2[0])==parseInt(last2[1]) || parseInt(last2[1])==parseInt(last2[2]) || parseInt(last2[2])==parseInt(last2[3]) || parseInt(last2[3])==parseInt(last2[4]) || parseInt(last2[4])==parseInt(last2[5])){
            lastcheck(last2);
        }
    }
}

console.log(counter);


//day 8/1

let input
let layers = [];

// robie sobie tablice z warstwami
for(let i=0; i<100; i++){
    layers[i] = input.substr(i*150, 150);
}

// a teraz funkcje liczaca ile warstwa ma elementow podanych w parametrze

let counter3;

const checklayer = function(layer, findThis){
    counter3 =0;
    for(let g=0; g<150; g++){
        if(layer[g] == findThis){
            counter3++;
        }
    }
    return counter3;
}

// szukam pasujacej warstwy z najmniejsza liczba 0
let bestlayer = 0;

for(let i=0; i<100; i++){
    if(checklayer(layers[bestlayer], 0) > checklayer(layers[i], 0)){
        bestlayer = i;
    }
}
// obliczam i pokazuje wynik
console.log("wynik to: " + (checklayer(layers[bestlayer], 1) * checklayer(layers[bestlayer], 2)) );


// day 8/2

// zaczne od funkcji sprawdzajacej czy mam juz dobry obraz
let countLayer = 0;

let verifylayer = function(layer) {

    for (let i = 0; i < 150; i++) {
        if (layer[i] != 2) {
            countLayer++;
        }
    }
    if(countLayer == 150){
        return layer[i];
    }
}

// a teraz funkcja podmieniajaca 2, na liczbe z kolejnej warstwy

let layerChanger = function(toChange, fromChange){
    for(let i=0; i<150; i++){
        if(toChange[i] == 2){
            toChange[i] = fromChange[i];
        }
    }
}

// moje warstwy sa stringami, zamienie pierwsza na tablice
let finalLayer = [];

for(let i=0; i<150; i++){
    finalLayer[i] = layers[0][i];
}

// ostateczne dzialanie

for(let z= 0; z<100; z++){
    verifylayer(finalLayer);
    layerChanger(finalLayer, layers[z]);
}

//wyswietlenie wyniku
console.log(finalLayer.join(''));

/*  // wynik
1111011110100001110010001
0001010000100001001010001
0010011100100001110001010
0100010000100001001000100
1000010000100001001000100
1111010000111101110000100
 */

// day 10/1

const asteroids = '.###.###.###.#####.######.##.###..###..#.#...####.###.############.###.####.#########..###..#########.##.###########.#.###.###.######..#.#.#.#.##.###.#.####.#####..#.#.##.############.#######.###..##.###.###.##.##..####..##.####.##########.#######.##.###.##########.##..####.#######.#.#####.##.#.#..############.#######.#.##..#####.#####..######..#####.###.#######.#.############.####.#.#.##########.';

let countAsteroid = 0;

let row3 = new Array(20);

for (var i = 0; i < row3.length; i++) {
    row3[i] = new Array(20);
}
for (let v=0; v<20; v++){
    for (let w=0; w<20; w++){
        row3[v][w] = asteroids.charAt(20*v +w);
        countAsteroid++;
    }
}

console.log(row3);
row3[0][0] = 'aaa';
console.log(row3);

//policze kat nachylenia miedzy badanym punktem a cala reszta
let outputs = row3.slice();
let finalData = outputs.slice();


// funkcja zwraca wspolczynnik 'a' prostej
// a i b wspolrzedne jednego punktu c i d drugiego
let angles = function(a, b, c, d){
    return (d-b)/(c-a);
}

// teraz trzeba wpisac wspolczynniki do tablicy dla kazdej asteroidy
// xxx i yyy to pozycja aktualnej dla ktorej licze

const writer = function(xxx, yyy, outputss){

    for(let g=0; g<20; g++){
        for(let h=0; h<20; h++){
            if(outputss[g][h] == '.'){
                outputss[g][h] = 'x';
            }
            else if(xxx == g){
                outputss[g][h] = 0;
            }
            else{
                outputss[g][h] = angles(xxx, yyy, g, h);
            }
        }
    }
    return outputss;
}

// teraz najtrudniejsze chyba, polioczyc te asteroidy

let countingTable = [];
let copyOfCountingTable = [[], [], [], []]; //dziwna tablica ale sie przyda wlasnie taka

let countAsteroids = function(xxx, yyy){

    countingTable = copyOfCountingTable.slice();

    for(let t=0; t<20; t++){
        for(let r=0; r<20; r++){
            if(t>xxx && r>yyy){
                if(!countingTable[0].some(function(el){
                    return el == outputs[t][r];
                })){
                    countingTable[0].push(outputs[t][r]);
                }
            }
            else if(t<xxx && r>yyy){
                if(!countingTable[1].some(function(el){
                    return el == outputs[t][r];
                })){
                    countingTable[1].push(outputs[t][r]);
                }
            }
            else if(t<xxx && r<yyy){
                if(!countingTable[2].some(function(el){
                    return el == outputs[t][r];
                })){
                    countingTable[2].push(outputs[t][r]);
                }
            }
            else if(t>xxx && r<yyy){
                if(!countingTable[3].some(function(el){
                    return el == outputs[t][r];
                })){
                    countingTable[3].push(outputs[t][r]);
                }
            }

            // w obliczeniach pomijam linie proste,
            // punkty majace szanse wygrac maja po 4 asteroidy na tych pozycjach
            finalData[xxx][yyy] = countingTable[0].length +countingTable[1].length +countingTable[2].length +countingTable[2].length;

        }
    }
}
/*
// ostateczne obliczenie
// trzeba dopracowac
for(let p=0; p<20; p++){
for(let q=0; q<20; q++){
	if(outputs[p][q] != 'x'){
	writer(p,q);
	countAsteroids(p,q);
	}
	else{
	finalData[p][q] = 0;
	}
	console.log(finalData[p][q]);
}
}
*/










